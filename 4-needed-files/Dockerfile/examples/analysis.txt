analysis.txt
Created Mon Mar 19 14:48:08 AKDT 2018
Copyright (C) 2018 by Raymond E. Marcil <marcilr@gmail.com>


Analysis



Dockerfile-psap
===============
Inspection of Dockerfile lines

FROM circleci/ruby:2.4-node
  An image’s parent image is the image designated in the
  FROM directive in the image’s Dockerfile.  All subsequent
  commands are applied to this parent image.
  --Docker glossary
    https://docs.docker.com/glossary/?term=parent%20image

VOLUME ["/opt/psap"]
  Official docker tutorial tells:

  A data volume is a specially-designated directory within
  one or more containers that bypasses the Union File
  System.  Data volumes provide several useful features for
  persistent or shared data:

  o Volumes are initialized when a container is created.
    If the container’s base image contains data at the
   specified mount point, that existing data is copied
   into the new volume upon volume initialization.
   (Note that this does not apply when mounting a host
   directory.)

  o Data volumes can be shared and reused among containers.

  o Changes to a data volume are made directly.

  o Changes to a data volume will not be included when you
    update an image.

  o Data volumes persist even if the container itself is
    deleted.

  --Understanding “VOLUME” instruction in DockerFile
    https://stackoverflow.com/questions/41935435/understanding-volume-instruction-in-dockerfile

ENV BUNDLE_PATH=/opt/bundle \
    BUNDLE_BIN=/opt/bundle/bin \
    GEM_HOME=/opt/bundle

ENV PATH="${BUNDLE_BIN}:${PATH}"

# Copy all files in psap/ directory to contains /opt/psap/
COPY . /opt/psap

# Set the working directory to /opt/psap
WORKDIR /opt/psap

#
# Copy entrypoint.sh into container at /
#
COPY ./docker/scripts/entrypoint.sh /

#
# The USER instruction sets the user name (or UID)
# and optionally the user group (or GID) to use
# when running the image and for any RUN, CMD and
# ENTRYPOINT instructions that follow it in the
# Dockerfile.[1]
#
USER root

#
# Set executable on entrypoint.sh script
# Executed as root
#
RUN chmod +x /entrypoint.sh

#
# The USER instruction sets the user name (or UID)
# and optionally the user group (or GID) to use
# when running the image and for any RUN, CMD and
# ENTRYPOINT instructions that follow it in the
# Dockerfile.[1]
#
USER circleci

#
# The shell form prevents any CMD or run command
# line arguments from being used, but has the
# disadvantage that your ENTRYPOINT will be started
# as a subcommand of /bin/sh -c, which does not
# pass signals. This means that the executable
# will not be the container’s PID 1 - and will
# not receive Unix signals - so your executable
# will not receive a SIGTERM from docker stop
# <container>.
#
# Only the last ENTRYPOINT instruction in the
# Dockerfile will have an effect.[1]
#
ENTRYPOINT /entrypoint.sh


Links
=====
[1] Dockerfile reference
https://docs.docker.com/engine/reference/builder/#usage

Get Started, Part 2: Containers
Pulled some good syntax from here
https://docs.docker.com/get-started/part2/

How CircleCI Works
Automate your pipeline from commit to deploy
o VCS Integration
  CircleCI integrates with GitHub, GitHub Enterprise, and Bitbucket.
  Every time you commit code, CircleCI creates a build.
o Automated Testing
  CircleCI automatically tests your build in a clean container or
  virtual machine.
o Notifications
  Your team is notified if a build fails so issues can be fixed
  quickly.
o Automated Deployment
  Passing builds are deployed to various environments so your
  product goes to market faster.
https://circleci.com/product/

Rails on Docker
Josh Clayton  February 19, 2015 UPDATED ON March 30, 2016
https://robots.thoughtbot.com/rails-on-docker
